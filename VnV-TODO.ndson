{"task":"Numeric validation of closed-form matrix elements vs generating functional","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_matrix_elements import closed_form_matrix_element\nfrom project.su2_matrix_elements_generating import generating_functional_matrix_element\n# sample valences for k-valent node\ntests = [ (2,2,2), (1,1,1,1), (1,2,3,2,1) ]\nfor v in tests:\n    cf = closed_form_matrix_element(*v)\n    gf = generating_functional_matrix_element(*v)\n    assert sp.simplify(cf - gf) == 0, f\"Mismatch for valences {v}\""}
{"task":"Regression test against reference matrix element data","priority":"Medium","python_snippet":"import json\nfrom project.su2_matrix_elements import closed_form_matrix_element\nwith open('tests/reference_matrix_elements.json') as f:\n    ref = json.load(f)\nfor key, val in ref.items():\n    vals = tuple(map(int, key.split(',')))\n    assert closed_form_matrix_element(*vals) == val, f\"Reference mismatch for {vals}\""}
{"task":"Symmetry relation checks for valence permutations","priority":"Medium","python_snippet":"import sympy as sp\nfrom project.su2_matrix_elements import closed_form_matrix_element\nvals = (1,2,3,2,1)\na = closed_form_matrix_element(*vals)\nb = closed_form_matrix_element(vals[1],vals[0],vals[2],vals[4],vals[3])\nassert sp.simplify(a - b) == 0, \"Permutation symmetry violation\""}
{"task":"Domain validation for half-integer valences","priority":"Low","python_snippet":"from project.su2_matrix_elements import closed_form_matrix_element\nimport sympy as sp\n# test integer and half-integer valences\ncases = [(sp.Rational(i,2) for i in (0,1,2,3))]*4\nfor v in [(i,j,k,l) for i in (0,sp.Rational(1,2),1) for j in (0,sp.Rational(1,2),1) for k in (0,sp.Rational(1,2),1) for l in (0,sp.Rational(1,2),1)]:\n    try:\n        closed_form_matrix_element(*v)\n    except Exception as e:\n        assert False, f\"Domain error for {v}: {e}\""}
{"task":"Performance benchmark: closed-form vs generating functional","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import time\nfrom project.su2_matrix_elements import closed_form_matrix_element\nfrom project.su2_matrix_elements_generating import generating_functional_matrix_element\nvals = (5,5,5,5,5)\nt0 = time.time(); generating_functional_matrix_element(*vals); t1 = time.time()-t0\nt0 = time.time(); closed_form_matrix_element(*vals); t2 = time.time()-t0\nassert t2 < t1, f\"Closed-form slower ({t2:.4f}s) than generating ({t1:.4f}s)\""}
{"task":"Composition relation cross-check via finite recurrences","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-recurrences\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_matrix_elements import closed_form_matrix_element\nfrom project.su2_3nj_recurrences import recurrence_3nj\ndef composed(valences):\n    # compose node into two 3-valent nodes and sum over intermediate\n    return sum(recurrence_3nj(*valences[:3], m, *valences[3:]) for m in range(0,3))\nvals = (1,1,1,1,1)\ncf = closed_form_matrix_element(*vals)\ncomp = composed(vals)\nassert sp.simplify(cf - comp) == 0, \"Composition mismatch\""}
{"task":"Consistency with uniform closed-form for low valence","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-uniform-closed-form\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_matrix_elements import closed_form_matrix_element\nfrom project.su2_3nj_uniform_closed_form import closed_form_3nj\n# 3-valent node reduces to 3j symbol\nvals = (1,1,1)\na = closed_form_matrix_element(*vals)\nb = closed_form_3nj(1,1,1,1,1,1)\nassert sp.simplify(a - b) == 0, \"Uniform closed-form inconsistency\""}
{"task":"Special-case check against closed-form 3nj hypergeometric","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-closedform\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_matrix_elements import closed_form_matrix_element\nfrom project.su2_3nj_closed_form import closed_form_3nj\n# 4-valent node corresponds to 6j symbol\nvals = (1,1,1,1)\nme = closed_form_matrix_element(*vals)\nwj = closed_form_3nj(1,1,1,1,1,1)\nassert sp.simplify(me - wj) == 0, \"Hypergeometric closed-form mismatch\""}